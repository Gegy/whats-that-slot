plugins {
  id 'java'
  id 'net.minecraftforge.gradle' version '5.1.+'
  id 'org.spongepowered.mixin' version '0.7+'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = "$mod_name-forge"

minecraft {
  mappings channel: "parchment", version: "$parchment_version-$parchment_minecraft_version"

  runs {
    client {
      taskName "client"
      workingDirectory project.file("run")
      ideaModule "${rootProject.name}.${project.name}.main"
      arg "-mixin.config=${mod_id}.mixins.json"

      mods {
        whats_that_slot {
          source sourceSets.main
          source project(":common").sourceSets.main
        }
      }
    }

    server {
      taskName "server"
      workingDirectory project.file("run")
      ideaModule "${rootProject.name}.${project.name}.main"
      arg "-mixin.config=${mod_id}.mixins.json"

      mods {
        whats_that_slot {
          source sourceSets.main
          source project(":common").sourceSets.main
        }
      }
    }

    data {
      taskName "data"
      workingDirectory project.file("run")
      ideaModule "${rootProject.name}.${project.name}.main"
      args "--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
      arg "-mixin.config=${mod_id}.mixins.json"

      mods {
        whats_that_slot {
          source sourceSets.main
          source project(":common").sourceSets.main
        }
      }
    }
  }
}

sourceSets.main.resources.srcDir "src/generated/resources"

repositories {
  maven { url "https://dvs1.progwml6.com/files/maven/" }
  maven { url "https://modmaven.dev" }
}

dependencies {
  compileOnly project(":common")

  minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

  compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-common-api:$jei_version")
  runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version")

  if (System.getProperty("idea.sync.active") != "true") {
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
  }
}

mixin {
  add project(":common").sourceSets.main, "${mod_id}.refmap.json"
  add sourceSets.main, "${mod_id}.refmap.json"
}

processResources {
  from project(":common").sourceSets.main.resources
}

tasks.withType(JavaCompile).configureEach {
  it.source(project(":common").sourceSets.main.allSource)
}

jar.finalizedBy("reobfJar")
